@use "sass:map";
@use "sass:meta";
@use "sass:list";

// Internal helpers
@function _merge-color-options($defaults, $overrides) {
    @if $overrides == null or meta.type-of($overrides) != "map" or list.length($overrides) == 0 {
        @return $defaults;
    }

    @return map.merge($defaults, $overrides);
}


// Color system properties
@property --color-shade {
    syntax: "<number>";
    inherits: false;
    initial-value: 0.0;
}

@property --color-tint {
    syntax: "<number>";
    inherits: false;
    initial-value: 0.0;
}

@property --color-opacity {
    syntax: "<number>";
    inherits: false;
    initial-value: 0.0;
}

@property --color-enable-blur {
    syntax: "<boolean>";
    inherits: false;
    initial-value: false;
}

// Enhanced colorize mixin with better organization
@mixin solid-colorize($selector: "&", $options: ("shade": 0.0, "tint": 0.0)) {
    #{$selector} {
        // Base color properties
        --color-shade: #{map.get($options, "shade") or 0.0};
        --color-tint: #{map.get($options, "tint") or 0.0};

        // Computed color values
        --surface-color: --c2-surface(var(--color-shade), var(--current, currentColor));
        --on-surface-color: --c2-on-surface(var(--color-tint), var(--current, currentColor));
        --border-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.2);
        --scrollbar-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.4);

        // Apply colors
        border-color: var(--border-color);
        background: var(--surface-color);
        color: var(--on-surface-color);
        accent-color: var(--on-surface-color);
        caret-color: var(--on-surface-color);
        text-decoration-color: var(--on-surface-color);
        text-emphasis-color: var(--on-surface-color);
        scrollbar-color: var(--scrollbar-color) transparent;
        -webkit-tap-highlight-color: var(--on-surface-color);
        -webkit-text-fill-color: var(--on-surface-color);

        //
        &:where(button, input, select, textarea) {
            border-style: solid;
            border-width: 0.5px;
        }

        // Interactive states
        &:where(button, input, select, textarea, a, li, option) {

            transition:
                border-color var(--transition-normal),
                background var(--transition-normal),
                box-shadow var(--transition-normal),
                transform var(--transition-fast);

            &:hover {
                --color-shade: calc(#{map.get($options, "shade") or 0.0} + var(--hover-lift));
            }

            &:active {
                --color-shade: calc(#{map.get($options, "shade") or 0.0} + var(--active-lift));
            }

            &:focus,
            &:focus-visible {
                --color-shade: calc(#{map.get($options, "shade") or 0.0} + var(--focus-lift));
            }

            &::placeholder {
                --on-surface-color: oklch(from --c2-on-surface(0.0, var(--current, currentColor)) l c h / 0.2);
            }
        }

        // Special states
        &:checked,
        &::selection {
            --on-surface-color: --c2-surface(calc(var(--color-shade) - 0.04), var(--current, currentColor));
            --surface-color: --c2-on-surface(calc(var(--color-tint) + 0.04), var(--current, currentColor));
        }

        //
        &:where(select) option {
            border-color: var(--border-color);
        }
    }
}

//
@mixin overlay-colorize($selector: "&", $options: ("shade": 0.0, "tint": 0.0, "opacity": 0.04, "enable-blur": true)) {
    #{$selector} {
        --color-shade: #{map.get($options, "shade") or 0.0};
        --color-tint: #{map.get($options, "tint") or 0.0};
        --color-opacity: #{map.get($options, "opacity")};
        --color-enable-blur: #{map.get($options, "enable-blur")};
    }

    //
    #{$selector} {
        @if map.get($options, "enable-blur") {
            backdrop-filter: blur(16px);
        }

        //
        --surface-color: oklch(from --c2-on-surface(var(--color-shade), var(--current, currentColor)) l c h / var(--color-opacity));
        --on-surface-color: --c2-on-surface(var(--color-tint), var(--current, currentColor));
        --border-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.1);
        --scrollbar-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.1);

        //
        border: solid 0.5px var(--border-color);
        background: var(--surface-color);
        color: var(--on-surface-color);
        accent-color: var(--on-surface-color);
        caret-color: var(--on-surface-color);
        text-decoration-color: var(--on-surface-color);
        text-emphasis-color: var(--on-surface-color);
        scrollbar-color: var(--scrollbar-color) transparent;
        -webkit-tap-highlight-color: var(--on-surface-color);
        -webkit-text-fill-color: var(--on-surface-color);
    }

    //
    #{$selector}:focus {
        --color-opacity: calc(#{map.get($options, "opacity") or 0.04} + 0.05);
    }

    //
    #{$selector}:hover {
        --color-opacity: calc(#{map.get($options, "opacity") or 0.04} + 0.04);
    }
}

//
@mixin font-style($selector: "&", $options: ("size": "base")) {
    font-size: var(--text-#{map.get($options, "size") or "base"});
}

// Enhanced font styling with design system integration
@mixin font-style($selector: "&", $options: (
    "size": "base",
    "weight": 400,
    "family": "inherit"
)) {
    #{$selector} {
        $size: map.get($options, "size") or "base";

        @if $size == "xs" {
            font-size: var(--text-xs);
        } @else if $size == "sm" {
            font-size: var(--text-sm);
        } @else if $size == "lg" {
            font-size: var(--text-lg);
        } @else if $size == "xl" {
            font-size: var(--text-xl);
        } @else {
            font-size: var(--text-base);
        }

        font-weight: #{map.get($options, "weight") or 400};
        font-family: #{map.get($options, "family") or "inherit"};
    }
}
