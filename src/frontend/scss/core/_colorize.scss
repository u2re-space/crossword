@use "sass:map";


// Color system properties
@property --color-shade {
    syntax: "<number>";
    inherits: false;
    initial-value: 0.0;
}

@property --color-tint {
    syntax: "<number>";
    inherits: false;
    initial-value: 0.0;
}

@property --color-opacity {
    syntax: "<number>";
    inherits: false;
    initial-value: 0.0;
}

@property --color-enable-blur {
    syntax: "<boolean>";
    inherits: false;
    initial-value: false;
}

// Enhanced colorize mixin with better organization
@mixin solid-colorize($selector: "&", $options: ("shade": 0.0, "tint": 0.0)) {
    #{$selector} {
        // Base color properties
        --color-shade: #{map.get($options, "shade") or 0.0};
        --color-tint: #{map.get($options, "tint") or 0.0};

        // Computed color values
        --surface-color: --c2-surface(var(--color-shade), var(--current, currentColor));
        --on-surface-color: --c2-on-surface(var(--color-tint), var(--current, currentColor));
        --border-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.2);
        --scrollbar-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.4);

        // Apply colors
        border-color: var(--border-color);
        background: var(--surface-color);
        color: var(--on-surface-color);
        accent-color: var(--on-surface-color);
        caret-color: var(--on-surface-color);
        text-decoration-color: var(--on-surface-color);
        text-emphasis-color: var(--on-surface-color);
        scrollbar-color: var(--scrollbar-color) transparent;
        -webkit-tap-highlight-color: var(--on-surface-color);
        -webkit-text-fill-color: var(--on-surface-color);

        //
        &:is(button, input, select, textarea) {
            border-style: solid;
            border-width: 0.5px;
        }

        // Interactive states
        &:is(button, input, select, textarea, a, li) {

            transition:
                border-color var(--transition-normal),
                background var(--transition-normal),
                box-shadow var(--transition-normal),
                transform var(--transition-fast);

            &:hover {
                --color-shade: calc(#{map.get($options, "shade") or 0.0} + var(--hover-lift));
            }

            &:active {
                --color-shade: calc(#{map.get($options, "shade") or 0.0} + var(--active-lift));
            }

            &:focus,
            &:focus-visible {
                --color-shade: calc(#{map.get($options, "shade") or 0.0} + var(--focus-lift));
            }

            &::placeholder {
                --on-surface-color: oklch(from --c2-on-surface(0.0, var(--current, currentColor)) l c h / 0.2);
            }
        }

        // Special states
        &:checked,
        &::selection {
            --on-surface-color: --c2-surface(calc(var(--color-shade) - 0.04), var(--current, currentColor));
            --surface-color: --c2-on-surface(calc(var(--color-tint) + 0.04), var(--current, currentColor));
        }
    }
}

//
@mixin overlay-colorize($selector: "&", $options: ("shade": 0.0, "tint": 0.0, "opacity": 0.04, "enable-blur": true)) {
    #{$selector} {
        --color-shade: #{map.get($options, "shade") or 0.0};
        --color-tint: #{map.get($options, "tint") or 0.0};
        --color-opacity: #{map.get($options, "opacity")};
        --color-enable-blur: #{map.get($options, "enable-blur")};
    }

    //
    #{$selector} {
        @if map.get($options, "enable-blur") {
            backdrop-filter: blur(16px);
        }

        //
        --surface-color: oklch(from --c2-on-surface(var(--color-shade), var(--current, currentColor)) l c h / var(--color-opacity));
        --on-surface-color: --c2-on-surface(var(--color-tint), var(--current, currentColor));
        --border-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.1);
        --scrollbar-color: oklch(from --c2-on-surface(calc(var(--color-tint) + 0.1), var(--current, currentColor)) l c h / 0.1);

        //
        border: solid 0.5px var(--border-color);
        background: var(--surface-color);
        color: var(--on-surface-color);
        accent-color: var(--on-surface-color);
        caret-color: var(--on-surface-color);
        text-decoration-color: var(--on-surface-color);
        text-emphasis-color: var(--on-surface-color);
        scrollbar-color: var(--scrollbar-color) transparent;
        -webkit-tap-highlight-color: var(--on-surface-color);
        -webkit-text-fill-color: var(--on-surface-color);
    }

    //
    #{$selector}:focus {
        --color-opacity: calc(#{map.get($options, "opacity") or 0.04} + 0.05);
    }

    //
    #{$selector}:hover {
        --color-opacity: calc(#{map.get($options, "opacity") or 0.04} + 0.04);
    }
}

// Enhanced font styling with design system integration
@mixin font-style($selector: "&", $options: (
    "size": "base",
    "weight": 500,
    "family": "inherit"
)) {
    #{$selector} {
        $size: map.get($options, "size") or "base";

        @if $size == "xs" {
            font-size: var(--text-xs);
        } @else if $size == "sm" {
            font-size: var(--text-sm);
        } @else if $size == "lg" {
            font-size: var(--text-lg);
        } @else if $size == "xl" {
            font-size: var(--text-xl);
        } @else {
            font-size: var(--text-base);
        }

        font-weight: #{map.get($options, "weight") or 500};
        font-family: #{map.get($options, "family") or "inherit"};
    }
}

// Utility mixins for common patterns
@mixin form-field-base {
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-md);
    border: none;
    outline: none;
    cursor: text;
    user-select: text;
    pointer-events: auto;
    inline-size: stretch;
    max-inline-size: stretch;
    field-sizing: content;

    @include solid-colorize("&");
    @include font-style("&");
}

@mixin button-base {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-md);
    border: none;
    cursor: pointer;
    pointer-events: auto;
    block-size: max-content;
    inline-size: max-content;
    max-inline-size: stretch;
    line-height: normal;

    @include solid-colorize("&");
    @include font-style("&");
}

@mixin select-dropdown {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    cursor: pointer;
    padding-inline-end: calc(var(--space-lg) * 2);

    // Better SVG icon that adapts to color scheme
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='currentColor'%3e%3cpath d='M4.2 6.4a.75.75 0 0 1 1.06-.05L8 8.68l2.74-2.33a.75.75 0 1 1 .98 1.14l-3.24 2.75a.75.75 0 0 1-.98 0L4.25 7.49a.75.75 0 0 1-.05-1.06z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right var(--space-md) center;
    background-size: var(--space-lg);

    @include form-field-base;
}

@mixin checkbox-radio-base {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    margin: 0;
    padding: 0;
    cursor: pointer;
    user-select: none;
    pointer-events: auto;
    aspect-ratio: 1 / 1;
    inline-size: auto;
    block-size: auto;
    max-inline-size: stretch;
    max-block-size: stretch;
    border-radius: var(--radius-xs);
    contain: strict;
    line-height: 0;
    content-visibility: auto;
    will-change: transform;
    transform: translateZ(0);
    transform-origin: 50% 50%;
    backface-visibility: hidden;

    @include solid-colorize("&");

    &::before {
        content: "";
        display: block;
        inline-size: stretch;
        block-size: stretch;
        max-inline-size: stretch;
        max-block-size: stretch;
        box-sizing: border-box;
        aspect-ratio: 1 / 1;
        text-align: center;
        overflow: hidden;
        border-radius: var(--radius-sm);
        contain: strict;
        object-fit: contain;
        object-position: center;
        background-color: var(--on-surface-color);
        mask-image: var(--ui-icon-mask, linear-gradient(#0000, #0000));
        mask-repeat: no-repeat;
        mask-origin: content-box;
        mask-clip: content-box;
        mask-position: center;
        mask-size: contain;
        mask-type: alpha;
        transition: background-color var(--transition-normal);
        padding: 0;
        margin: 0;
    }
}
