/*
 * Used for generating entity IDs by AI, searching and filtering entities.
 * Also used by shorter form of entities in IndexedDB and Cache.
 */
export const ABOUT_NAME_ID_GENERATION = `
=== BEGIN:ABOUT_NAME_ID_GENERATION ===
"Give potential 'name'/IDs for entities in following rules:",

! For AI generation, this field 'desc.name' may be omitted or optionally generated by AI.
! We planned to generate name by runtime schema, not by GPT response.

Rules for generating entity IDs ('name' in { desc: { name: string, ... }, properties: ... }):
- Letters or numbers
- Allowed symbols, such as '-', '_', '&', '#', '+'
- Whitespace not allowed
- No emojis or special symbols
- No Cyrillic or Latin letters

How generates entity IDs:
- Prefixed by service, market or vendor (if bonus entity, such as promo, discount, bonus, etc.)
- Name, type or kind (if no name declared) of entity encodes into ID by conversion spaces into '-', etc.
- CODE suffix is used for unique code of entity, such as promo-code, discount-code, etc.

For example:

/*
   - [in bonuses list] zdravia-clinic_therapist_CODE123 - promo-code for therapist of zdravia-clinic
   - [in persons list] alena-victorovna_additional-identifier - person of Alena Viktorovna, for additional identifier may be used service, skill, email or phone number
   - [in items list] book_the-best-book - book of the best book
*/

Such idea used for make simpler search, filtering and sorting of entities.

=== END:ABOUT_NAME_ID_GENERATION ===
`;





/*
 * Scheme system v1.0.0-pre (under development)
 * This file contains the JSON schemas for the entities in the system.
 * It is used to validate the entities and to generate the entities.
 * It is also used to generate the entities from the JSON schemas.
 * It is also used to generate the JSON schemas from the entities.
 * Also, by these schemas, stored and validated in OPFS and WebDav file systems.
 * In IndexedDB and Cache stored in shorter form, for faster access and search.
 */

//
export const NAME_SCHEME = { type: "string", minLength: 1 };
export const DESCRIPTION_SCHEME = { type: "string" };
export const ICON_SCHEME = { type: "string" };
export const TAGS_SCHEME = { type: "array", items: { type: "string" } };
export const IMAGE_SCHEME = { type: "array", items: { type: "string", format: "uri" } };
export const WHERE_IS_SCHEME = { type: "array", items: { type: "string" } };
export const SERVICES_SCHEME = { type: "array", items: { type: "string" } };
export const MEMBERS_SCHEME = { type: "array", items: { type: "string" } };
export const TASKS_SCHEME = { type: "array", items: { type: "string" } };
export const ACTIONS_SCHEME = { type: "array", items: { type: "string" } };
export const DIFFICULTY_SCHEME = { type: "number", minimum: 0 };
export const DURATION_SCHEME = { type: "number", minimum: 0 };
export const LEVEL_SCHEME = { type: "number", minimum: 0, maximum: 100 };
export const USAGE_SCHEME = { type: "string" };
export const PERSON_SCHEME = { type: "array", items: { type: "string" } };
export const BONUSES_SCHEME = { type: "array", items: { type: "string" } };
export const FEEDBACKS_SCHEME = { type: "array", items: { type: "string" } };
export const TITLE_SCHEME = { type: "string" };

//
export const COORDINATES_SCHEME = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "object",
    additionalProperties: false,
    properties: {
        latitude: { type: "number", minimum: -90, maximum: 90 },
        longitude: { type: "number", minimum: -180, maximum: 180 }
    },
    required: ["latitude", "longitude"]
};

//
export const CONTACT_SCHEME = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "object",
    additionalProperties: false,
    properties: {
        name: { type: "string" },
        phone: { type: "array", items: { type: "string" } },
        email: { type: "array", items: { type: "string", format: "email" } }
    },
    required: ["name"]
};

//
export const TIMESTAMP_SCHEME = {
    anyOf: [
        { type: "number" },
        { type: "string", format: "date-time" }
    ]
};

//
export const AVAILABILITY_SCHEME = {
    enum: ["public", "everyone", "members", "private", "other"]
};

//
export const AVAILABILITY_TIME_SCHEME = {
    type: "array",
    items: { type: "string", format: "time" }
};

//
export const AVAILABILITY_DAYS_SCHEME = {
    type: "array",
    items: { type: "string" }
};

//
export const PERMISSIONS_SCHEME = {
    enum: ["public", "everyone", "members", "private", "other"]
};

//
export const SHARED_DEFS = {
    Coordinates: COORDINATES_SCHEME,
    Contact: CONTACT_SCHEME,
    Tags: TAGS_SCHEME,
    Images: IMAGE_SCHEME,
    Id: { type: "string" },
    IdArray: { type: "array", items: { type: "string" } },
    LocationRef: {
        anyOf: [
            { $ref: "#/$defs/Coordinates" },
            { $ref: "#/$defs/Id" }
        ]
    },
    Timestamp: TIMESTAMP_SCHEME
};



//
export const KIND_MAP = {
    "task": [],
    "factor": ["weather", "health", "family", "relationships", "job", "traffic", "business", "economy", "politics", "other"],
    "location": [],
    "skill": ["skill", "knowledge", "ability", "trait", "experience", "other"],
    "vendor": ["vendor", "company", "organization", "institution", "other"],
    "market": ["market", "store", "shop", "mall", "cafe", "bar", "restaurant", "hotel", "other"],
    "placement": ["placement", "place", "location", "shop", "restaurant", "cafe", "bar", "hotel", "other"],
    "service": ["service", "product", "item", "thing", "other"],
    "person": [],
    "vehicle": [],
    "event": [],
    "item": ["currency", "book", "electronics", "furniture", "medicine", "tools", "software", "consumables", "other"],
    "bonus": ["cash-back", "promo-code", "loyalty-card", "gift-card", "discount", "bonus-card", "bonus-points", "bonus-points-card", "earn-points", "earn-points-card"],
    "lottery": ["lottery", "raffle", "draw", "draw-lottery", "draw-raffle", "draw-lottery-raffle", "draw-lottery-raffle-draw", "draw-lottery-raffle-draw-draw-lottery", "draw-lottery-raffle-draw-draw-raffle"],
    "reward": ["item", "cash", "bonus", "skill", "stat", "experience", "other", "person", "contact", "task", "job", "entertainment"],
    "fine": ["item", "time", "cash", "bonus", "skill", "stat", "experience", "other", "person", "contact", "task", "job", "entertainment"],
    "action": ["thinking", "imagination", "remembering", "speaking", "learning", "listening", "reading", "writing", "moving", "traveling", "speech", "physically", "crafting", "following", "other"],
    "entertainment": ["entertainment", "sport", "education", "cinema", "museum", "hobby", "drawing", "reading", "shopping", "other"],
    "unspecified": ["unspecified", "unknown", "other"],
    "unknown": ["unknown", "other"],
    "other": ["other"]
};

//
export const PRIMARY_PROPS = {
    "name": NAME_SCHEME,
    "icon": ICON_SCHEME,
    "title": TITLE_SCHEME,
    "description": DESCRIPTION_SCHEME,
    "tags": { $ref: "#/$defs/Tags" }
};

//
export const JSON_SCHEMES = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    $defs: SHARED_DEFS,
    $task: {
        desc: PRIMARY_PROPS,
        kind: { enum: KIND_MAP.task },
        properties: {
            status: { enum: ["under_consideration", "pending", "in_progress", "completed", "failed", "delayed", "canceled", "other"] },

            //
            image: { $ref: "#/$defs/Images" },

            //
            begin_time: { $ref: "#/$defs/Timestamp" },
            end_time: { $ref: "#/$defs/Timestamp" },

            //
            location: { $ref: "#/$defs/LocationRef" },
            contacts: { $ref: "#/$defs/Contact" },
            members: { $ref: "#/$defs/IdArray" },
            events: { $ref: "#/$defs/IdArray" },

            //
            rewards: BONUSES_SCHEME,
            bonuses: BONUSES_SCHEME,
            actions: ACTIONS_SCHEME,
            costs: BONUSES_SCHEME
        },
        required: ["kind", "status", "location"]
    },

    $entities: {
        //
        factor: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.factor },
            properties: {
                affect: { enum: ["positive", "negative", "neutral"] },
                actions: { $ref: "#/$defs/IdArray" },
                image: { $ref: "#/$defs/Images" },
                location: { $ref: "#/$defs/LocationRef" },
                begin_time: { $ref: "#/$defs/Timestamp" },
                end_time: { $ref: "#/$defs/Timestamp" },
                members: { $ref: "#/$defs/IdArray" }
            },
            required: ["kind", "affect"]
        },

        //
        location: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.location },
            properties: {
                image: { $ref: "#/$defs/Images" },
                coordinates: { $ref: "#/$defs/Coordinates" },
                street: { type: "string" },
                house: { type: "string" },
                flat: { type: "string" },
                floor: { type: "number" },
                room: { type: "number" },
                square: { type: "number" },
                price: { type: "number" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },
                rewards: BONUSES_SCHEME
            },
            required: ["kind"]
        },

        //
        skill: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.skill },
            properties: {
                image: { $ref: "#/$defs/Images" },
                level: LEVEL_SCHEME,
                tasks: { $ref: "#/$defs/IdArray" },
                actions: ACTIONS_SCHEME,
                bonuses: BONUSES_SCHEME,
                results: { type: "array", items: { type: "string" } },
                profession_related: { $ref: "#/$defs/IdArray" }, // professions related to this skill
            },
            required: ["kind", "profession_related"]
        },

        //
        vendor: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.vendor },
            properties: {
                image: { $ref: "#/$defs/Images" },
                coordinates: { $ref: "#/$defs/Coordinates" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },
                feedbacks: FEEDBACKS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME
            },
            required: ["kind", "coordinates"]
        },

        //
        market: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.market },
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                location: { $ref: "#/$defs/LocationRef" },

                //
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },

                //
                feedbacks: FEEDBACKS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                costs: BONUSES_SCHEME,

                //
                purpose: { enum: ["entertainment", "food", "services", "medical", "electronics", "furniture", "specialized", "professional", "other"] },
                permissions: PERMISSIONS_SCHEME,
                availability: AVAILABILITY_SCHEME,
                availabilityTime: AVAILABILITY_TIME_SCHEME,
                availabilityDays: AVAILABILITY_DAYS_SCHEME,
            },
            required: ["kind", "purpose"]
        },

        //
        placement: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.placement },
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                coordinates: { $ref: "#/$defs/LocationRef" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },

                //
                feedbacks: FEEDBACKS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                costs: BONUSES_SCHEME
            },
            required: ["kind", "coordinates"]
        },

        //
        service: {
            desc: PRIMARY_PROPS,
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                whereIs: WHERE_IS_SCHEME,

                //
                location: { $ref: "#/$defs/LocationRef" },

                //
                persons: PERSON_SCHEME,
                contacts: { $ref: "#/$defs/Contact" },
                tasks: { $ref: "#/$defs/IdArray" },
                actions: ACTIONS_SCHEME,

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                costs: BONUSES_SCHEME,
                feedbacks: FEEDBACKS_SCHEME,

                //
                price: { type: "number" },
                quantity: { type: "number" }
            },
            required: ["kind", "location"]
        },

        //
        person: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.person },
            properties: {
                image: { $ref: "#/$defs/Images" },
                home: { $ref: "#/$defs/LocationRef" },
                jobs: { type: "array", items: { $ref: "#/$defs/LocationRef" } },
                tasks: { $ref: "#/$defs/IdArray" },

                //
                contacts: { $ref: "#/$defs/Contact" },
                services: { $ref: "#/$defs/IdArray" },

                //
                actions: ACTIONS_SCHEME,
                feedbacks: FEEDBACKS_SCHEME
            },
            required: ["kind", "location"]
        },

        // it's your car, transport, bike, or rented transport, or ride on bus, train, etc.
        vehicle: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.vehicle },
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                role: { enum: ["driver", "passenger", "other"] },
                rights: { enum: ["own", "rented", "borrowed", "service", "free", "other"] },
                destination: { $ref: "#/$defs/LocationRef" },
                route: { $ref: "#/$defs/IdArray" }, // routes to destination, in future it may be separate entity, but now it's just array of locations

                // for bus, train, etc.
                timeLimit: { $ref: "#/$defs/Timestamp" },

                //
                location: { $ref: "#/$defs/LocationRef" },
                services: { $ref: "#/$defs/IdArray" },
                contacts: { $ref: "#/$defs/Contact" },

                //
                members: { $ref: "#/$defs/IdArray" },

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                feedbacks: FEEDBACKS_SCHEME,

                //
                price: { type: "number" },
                quantity: { type: "number" }
            },
            required: ["kind", "location"]
        },

        //
        event: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.event },
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                location: { $ref: "#/$defs/LocationRef" },

                //
                tasks: { $ref: "#/$defs/IdArray" },

                //
                begin_time: { $ref: "#/$defs/Timestamp" },
                end_time: { $ref: "#/$defs/Timestamp" },

                //
                members: { $ref: "#/$defs/IdArray" },

                //
                actions: ACTIONS_SCHEME,

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                costs: BONUSES_SCHEME
            },
            required: ["begin_time", "location"]
        },

        //
        item: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.item },
            properties: {

                //
                image: { $ref: "#/$defs/Images" },

                //
                markets: { $ref: "#/$defs/IdArray" },

                //
                location: { $ref: "#/$defs/LocationRef" },
                contacts: { $ref: "#/$defs/Contact" },

                //
                suitableFor: ACTIONS_SCHEME,
                feedbacks: FEEDBACKS_SCHEME,

                //
                price: { type: "number" }, // if currency, used for exchange (RUB/EUR/USD)
                quantity: { type: "number" } // if currency, how many money you has, negative value is used for debt
            },
            required: ["location"]
        },

        //
        action: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.action },
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                difficulty: DIFFICULTY_SCHEME,
                duration: DURATION_SCHEME,

                // <isn't very good suitable for actions, preferred for tasks>
                location: { $ref: "#/$defs/LocationRef" },

                // for what tasks doing this action
                tasks: { $ref: "#/$defs/IdArray" },

                // what used items, skills, services, etc. so needs to mention entity type
                // arrays of pairs of entity type and entity id, e.g. [{ type: "item", id: "book" }, { type: "skill", id: "coding" }]
                whatUsed: { $ref: "#/$defs/IdArray" },

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                costs: BONUSES_SCHEME
            },
            required: ["location"]
        },

        //
        entertainment: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.entertainment },
            properties: {
                image: { $ref: "#/$defs/Images" },

                //
                actions: ACTIONS_SCHEME,
                persons: PERSON_SCHEME,

                //
                contacts: { $ref: "#/$defs/Contact" },

                //
                location: { $ref: "#/$defs/LocationRef" },

                //
                begin_time: { $ref: "#/$defs/Timestamp" },
                end_time: { $ref: "#/$defs/Timestamp" },

                //
                tasks: { $ref: "#/$defs/IdArray" },

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                feedbacks: FEEDBACKS_SCHEME
            },
            required: ["location"]
        },

        //
        bonus: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.bonus },

            // used for request, along with kind details
            usabilityKind: {
                forEntity: [
                    "item",
                    "service",
                    "entertainment",
                    "action"
                ],
                inEntity: [
                    "location",
                    "market",
                    "placement",
                    "event",
                    "action",
                    "person"
                ]
            },

            //
            properties: {
                image: { $ref: "#/$defs/Images" },

                // items, services, entertainment, actions, events
                usableFor: { $ref: "#/$defs/IdArray" },

                // location, market, placement, service, entertainment, action, person, event
                usableIn: { $ref: "#/$defs/IdArray" },

                //
                availability: AVAILABILITY_SCHEME,
                availabilityTime: AVAILABILITY_TIME_SCHEME,
                availabilityDays: AVAILABILITY_DAYS_SCHEME,

                //
                requirements: { $ref: "#/$defs/IdArray" },

                // additional properties
                additionalProperties: { type: "object" },

                //
                persons: PERSON_SCHEME,
                actions: ACTIONS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,

                //
                contacts: { $ref: "#/$defs/Contact" }
            },
            required: ["location"]
        },

        //
        lottery: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.lottery },
            properties: {
                requirements: { $ref: "#/$defs/IdArray" },
                chance: { type: "number", minimum: 0, maximum: 100 },
                image: { $ref: "#/$defs/Images" },
                location: { $ref: "#/$defs/LocationRef" },
                usageLimit: { type: "number" },
                timeLimit: { $ref: "#/$defs/Timestamp" },
                rewards: BONUSES_SCHEME,
                bonuses: BONUSES_SCHEME,
                costs: BONUSES_SCHEME
            },
            required: ["chance", "rewards", "requirements", "location"]
        },

        // also, may means debt, receipt, etc.
        fine: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.fine },
            properties: {
                // what needs to give in case of fine (time is may be arrest or sentence, or job), but not for reward
                reasonsToGive: { $ref: "#/$defs/IdArray" },
                location: { $ref: "#/$defs/LocationRef" },
                entity: { $ref: "#/$defs/Id" },
                usageLimit: { type: "number" },
                timeLimit: { $ref: "#/$defs/Timestamp" },
                image: { $ref: "#/$defs/Images" },
                entityLocation: { $ref: "#/$defs/LocationRef" }
            },
            required: ["entity", "location"]
        },

        //
        reward: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.reward },
            properties: {
                requirements: { $ref: "#/$defs/IdArray" },
                location: { $ref: "#/$defs/LocationRef" },
                usageLimit: { type: "number" },
                timeLimit: { $ref: "#/$defs/Timestamp" },
                image: { $ref: "#/$defs/Images" },
                entityLocation: { $ref: "#/$defs/LocationRef" }
            },
            required: ["location"]
        },

        // if entity is not specified, it's unknown
        unknown: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.unknown },
            properties: {
                image: { $ref: "#/$defs/Images" },
                location: { $ref: "#/$defs/LocationRef" },
                suggestedKind: { type: "string" }
            }
        }
    },
};

//
export const AI_OUTPUT_SCHEMA = {
    task: JSON_SCHEMES.$task,
    oneOf: [
        JSON_SCHEMES.$entities.location,
        JSON_SCHEMES.$entities.vendor,
        JSON_SCHEMES.$entities.market,
        JSON_SCHEMES.$entities.placement,
        JSON_SCHEMES.$entities.service,
        JSON_SCHEMES.$entities.person,
        JSON_SCHEMES.$entities.vehicle,
        JSON_SCHEMES.$entities.event,
        JSON_SCHEMES.$entities.item,
        JSON_SCHEMES.$entities.action,
        JSON_SCHEMES.$entities.entertainment,
        JSON_SCHEMES.$entities.bonus,
        JSON_SCHEMES.$entities.reward,
        JSON_SCHEMES.$entities.lottery,
        JSON_SCHEMES.$entities.fine,
        JSON_SCHEMES.$entities.unknown,
        JSON_SCHEMES.$entities.factor
    ]
};
