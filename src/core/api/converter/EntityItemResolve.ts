import { ABOUT_NAME_ID_GENERATION, JSON_SCHEMES } from "../../model/Entities";
import type { GPTConversion } from "../endpoints/GPT-Conversion";
import { ASK_WRITE_JSON_FORMAT } from "../endpoints/GPT-Config";
import { safe } from "fest/object";

//
export const resolveEntity = async (entityType: any, entityKind: any, gptConversion: GPTConversion)=>{
    const instructions = [
        "You are a helpful assistant that can convert data from one format to another. You are given a data source and you need to convert it to the target format. Give in following JSON format: " + ASK_WRITE_JSON_FORMAT + " + " + ABOUT_NAME_ID_GENERATION,
        "JSON Data partially complains with: `https://json-schema.org/draft/2020-12/schema`",
        `Shared Defs Declared:
\`\`\`json\n
${JSON.stringify(JSON_SCHEMES.$defs, null, 2)}\n
\`\`\``,

// For AI generation, this field 'desc.name' may be omitted or optionally generated by AI.
// We planned to generate name by runtime schema, not by GPT response.
ABOUT_NAME_ID_GENERATION,
    ]?.map?.((instruction)=> instruction?.trim?.());

    //
    gptConversion.addInstruction(instructions?.join?.("\n"));
    gptConversion.addToRequest(`
Shortlist of related entities of ${entityType} entity, for making compatible conversion:
\`\`\`json
${JSON.stringify(safe((JSON_SCHEMES.$entities as any)?.find?.((category)=> category?.id === entityType)?.items?.filter?.((item)=> (item?.kind === entityKind || !entityKind || entityKind === "unknown"))), null, 2)}
\`\`\`
    `);

    //
    const response = await gptConversion.sendRequest();
    return JSON.parse(response?.content);
}
