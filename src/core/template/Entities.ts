/*
 * Used for generating entity IDs by AI, searching and filtering entities.
 * Also used by shorter form of entities in IndexedDB and Cache.
 */
export const ABOUT_NAME_ID_GENERATION = `
=== BEGIN:ABOUT_NAME_ID_GENERATION ===
"Give potential 'name'/IDs for entities in following rules:",

! For AI generation, this field 'desc.name' may be omitted or optionally generated by AI.
! We planned to generate name by runtime schema, not by GPT response.

Rules for generating entity IDs ('name' in { desc: { name: string, ... }, properties: ... }):
- Letters or numbers
- Allowed symbols, such as '-', '_', '&', '#', '+'
- Whitespace not allowed
- No emojis or special symbols
- No Cyrillic or Latin letters

How generates entity IDs:
- If known person names (biography), use formatted their names, location or job also can be used.
- Prefixed by service, market or vendor (if bonus entity, such as promo, discount, bonus, etc.)
- Name, type or kind (if no name declared) of entity encodes into ID by conversion spaces into '-', etc.
- CODE suffix is used for unique code of entity, such as promo-code, discount-code, etc.

For example:

/*
   - [in bonuses list] zdravia-clinic_therapist_CODE123 - promo-code for therapist of zdravia-clinic
   - [in persons list] alena-victorovna_additional-identifier - person of Alena Viktorovna, for additional identifier may be used service, skill, email or phone number
   - [in items list] book_the-best-book - book of the best book
*/

Such idea used for make simpler search, filtering and sorting of entities.

=== END:ABOUT_NAME_ID_GENERATION ===
`;


export const AI_OUTPUT_GUIDE = `
=== BEGIN:AI_OUTPUT_GUIDE ===
Goal: produce a JSON object that always contains a "task" description plus a single "entity" description.

1. Always return a JSON object with two top-level fields: { "task": {...}, "entity": {...} }.
2. Fill "task" using the schema noted as $task. It describes the related task context.
   - Use "desc" for display properties: { "name", "icon", "title", "tags" }.
   - Use "kind" from the allowed values for tasks and set "status" inside "properties.status".
   - Provide timing values using ISO-8601 strings when unsure of exact timestamps.
   - Put location references by ID or coordinates inside "properties.location".
3. Fill "entity" with exactly one entity block from $entities.
   - Choose the block whose "kind" matches the real-world thing you are describing.
   - Every entity must include: { "desc", "kind", "variant" (if allowed), "properties": {...} }.
   - Keep "properties" focused on structured facts. Use arrays or IDs where the schema expects them.
4. Prefer IDs that can exist in the user's system. Reuse task IDs and entity IDs to keep relations consistent.
5. When a field is optional and information is unknown, omit it completely instead of guessing.
6. Do not invent extra top-level keys (no "meta", "notes", etc.). Use only the names defined in the schema.
7. Return compact JSON without markdown, code fences, or commentary.

Example skeleton:
{
  "task": {
    "desc": { "name": "...", "icon": "...", "title": "...", "tags": ["..."] },
    "kind": "target",
    "variant": "green",
    "description": "Plain text or markdown",
    "image": ["https://..."],
    "properties": {
      "status": "in_progress",
      "location": "entity-id-or-coordinates",
      "members": ["entity-id"],
      "actions": ["entity-id"]
    }
  },
  "entity": {
    "desc": { "name": "..." },
    "kind": "service",
    "variant": "purple",
    "description": "...",
    "image": [],
    "properties": {
      "location": "entity-id-or-coordinates",
      "contacts": { "name": "...", "phone": ["..."] },
      "tasks": ["task-id"]
    }
  }
}

=== END:AI_OUTPUT_GUIDE ===
`;





/*
 * Scheme system v1.0.0-pre (under development)
 * This file contains the JSON schemas for the entities in the system.
 * It is used to validate the entities and to generate the entities.
 * It is also used to generate the entities from the JSON schemas.
 * It is also used to generate the JSON schemas from the entities.
 * Also, by these schemas, stored and validated in OPFS and WebDav file systems.
 * In IndexedDB and Cache stored in shorter form, for faster access and search.
 */

//
export const NAME_SCHEME = { type: "string", minLength: 1 };
export const DESCRIPTION_SCHEME = { type: "MARKDOWN_TEXT|MARKDOWN_TEXT[]", format: "markdown" };
export const ICON_SCHEME = { type: "string|number", note: "used phosphor icons set" };
export const TAGS_SCHEME = { type: "array", items: { type: "string|number" } };
export const IMAGE_SCHEME = { type: "array", items: { type: "string", format: "uri" } };
export const WHERE_IS_SCHEME = { type: "array", items: { type: "string|number" } };
export const SERVICES_SCHEME = { type: "array", items: { type: "string" } };
export const MEMBERS_SCHEME = { type: "array", items: { type: "string" } };
export const TASKS_SCHEME = { type: "array", items: { type: "string" } };
export const ACTIONS_SCHEME = { type: "array", items: { type: "string" } };
export const DIFFICULTY_SCHEME = { type: "number", minimum: 0 };
export const DURATION_SCHEME = { type: "number", minimum: 0 };
export const LEVEL_SCHEME = { type: "number", minimum: 0, maximum: 100 };
export const USAGE_SCHEME = { type: "string" };
export const PERSON_SCHEME = { type: "array", items: { type: "string" } };
export const BONUSES_SCHEME = { type: "array|number", items: { type: "string|number" } };
export const FEEDBACKS_SCHEME = { type: "array", items: { type: "string" } };
export const TITLE_SCHEME = { type: "string" };

//
export const COORDINATES_SCHEME = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "object",
    additionalProperties: false,
    properties: {
        latitude: { type: "number", minimum: -90, maximum: 90 },
        longitude: { type: "number", minimum: -180, maximum: 180 }
    },
    required: ["latitude", "longitude"]
};

//
export const CONTACT_SCHEME = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "object",
    additionalProperties: false,
    properties: {
        name: { type: "string" },
        phone: { type: "array", items: { type: "string" } },
        email: { type: "array", items: { type: "string", format: "email" } }
    },
    required: ["name"]
};

//
export const TIMESTAMP_SCHEME = {
    anyOf: [
        { type: "number", note: "timestamp in milliseconds" },
        { type: "string", format: "date-time", note: "ISO 8601 format" }
    ]
};

//
export const AVAILABILITY_SCHEME = {
    enum: ["public", "everyone", "members", "private", "other"]
};

//
export const AVAILABILITY_TIME_SCHEME = {
    type: "array",
    items: { type: "string", format: "time" }
};

//
export const AVAILABILITY_DAYS_SCHEME = {
    type: "array",
    items: { type: "string" }
};

//
export const PERMISSIONS_SCHEME = {
    enum: ["public", "everyone", "members", "private", "other"]
};

//
export const COLOR_VARIANT_SCHEME = {
    enum: ["blur", "purple", "green", "orange", "red", "blue", "yellow", "pink", "brown", "gray", "black", "white", "other"]
};


//
export const SHARED_DEFS = {
    Icon: ICON_SCHEME,
    ColorVariant: COLOR_VARIANT_SCHEME,
    Coordinates: COORDINATES_SCHEME,
    Contact: CONTACT_SCHEME,
    Tags: TAGS_SCHEME,
    Images: IMAGE_SCHEME,
    Id: { type: "string|number" },
    IdArray: { type: "string|number|array", items: { type: "string|number" } },
    LocationRef: {
        anyOf: [
            { $ref: "#/$defs/Coordinates" },
            { $ref: "#/$defs/Id" }
        ]
    },
    Timestamp: TIMESTAMP_SCHEME
};



//
export const KIND_MAP = {
    "task": ["target", "complete", "current", "delayed", "finished", "canceled", "planned", "resolved", "reviewed", "assigned", "proposed", "suggested"],
    "factor": ["weather", "health", "family", "relationships", "job", "traffic", "business", "economy", "politics", "news", "other"],
    "location": ["building", "point", "street", "destination", "address", "other"],
    "skill": ["skill", "knowledge", "ability", "trait", "experience", "other"],
    "vendor": ["vendor", "company", "organization", "institution", "other"],
    "market": ["market", "service", "store", "pharmacy", "shop", "mall", "cafe", "bar", "restaurant", "hotel", "other"],
    "place": ["placement", "place", "school", "university", "service", "clinic", "pharmacy", "hospital", "library", "market", "location", "shop", "restaurant", "cafe", "bar", "hotel", "other"],
    "service": ["service", "product", "consultation", "advice", "medical", "mentoring", "training", "item", "thing", "other"],
    "person": ["specialist", "service", "consultant", "coach", "mentor", "dear", "helper", "assistant", "friend", "family", "relative", "other"],
    "vehicle": ["bus", "trolleybus", "boat", "yacht", "ship", "scooter", "bike", "train", "tram", "auto", "car", "taxi", "truck", "airplane", "helicopter", "other"],
    "event": ["education", "lecture", "conference", "meeting", "seminar", "workshop", "presentation", "celebration", "opening", "other"],
    "item": ["currency", "book", "electronics", "furniture", "medicine", "tools", "software", "consumables", "other"],
    "bonus": ["cash-back", "promo-code", "loyalty-card", "gift-card", "discount", "bonus-card", "bonus-points", "bonus-points-card", "earn-points", "earn-points-card"],
    "lottery": ["lottery", "raffle", "draw", "draw-lottery", "draw-raffle", "draw-lottery-raffle", "draw-lottery-raffle-draw", "draw-lottery-raffle-draw-draw-lottery", "draw-lottery-raffle-draw-draw-raffle"],
    "reward": ["item", "cash", "bonus", "skill", "stat", "experience", "person", "contact", "task", "job", "entertainment", "other"],
    "fine": ["item", "time", "cash", "bonus", "skill", "stat", "experience", "other", "person", "contact", "task", "job", "entertainment"],
    "action": ["thinking", "imagination", "remembering", "speaking", "learning", "listening", "reading", "writing", "moving", "traveling", "speech", "physically", "crafting", "following", "other"],
    "entertainment": ["entertainment", "sport", "education", "cinema", "museum", "hobby", "drawing", "reading", "shopping", "other"],
    "unknown": ["unspecified", "unknown", "other"]
};

//
export const PRIMARY_PROPS = {
    "name": NAME_SCHEME,
    "icon": ICON_SCHEME,
    "title": TITLE_SCHEME,
    "tags": { $ref: "#/$defs/Tags" }
};

//
export const JSON_SCHEMES = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    $defs: SHARED_DEFS,
    $task: {
        desc: PRIMARY_PROPS,
        variant: { $ref: "#/$defs/ColorVariant" },
        kind: { enum: KIND_MAP.task },
        description: DESCRIPTION_SCHEME,
        image: { $ref: "#/$defs/Images" },
        icon: { $ref: "#/$defs/Icon" },
        properties: {
            status: {
                enum: ["under_consideration", "pending", "in_progress", "completed", "failed", "delayed", "canceled", "other"],
                default: "pending",
            },

            //
            begin_time: { $ref: "#/$defs/Timestamp" },
            end_time: { $ref: "#/$defs/Timestamp" },

            //
            location: { $ref: "#/$defs/LocationRef" },
            contacts: { $ref: "#/$defs/Contact" },
            members: { $ref: "#/$defs/IdArray" },
            events: { $ref: "#/$defs/IdArray" },

            //
            rewards: BONUSES_SCHEME,
            bonuses: BONUSES_SCHEME,
            actions: ACTIONS_SCHEME,
            prices: BONUSES_SCHEME
        },
        required: ["kind", "status", "location", "begin_time", "end_time", "properties"]
    },

    $entities: {
        //
        factor: {
            desc: PRIMARY_PROPS,
            variant: { $ref: "#/$defs/ColorVariant" },
            kind: { enum: KIND_MAP.factor },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            properties: {
                affect: { enum: ["positive", "negative", "neutral"] },
                actions: { $ref: "#/$defs/IdArray" },
                location: { $ref: "#/$defs/LocationRef" },
                begin_time: { $ref: "#/$defs/Timestamp" },
                end_time: { $ref: "#/$defs/Timestamp" },
                members: { $ref: "#/$defs/IdArray" }
            },
            required: ["kind", "affect", "properties"]
        },

        //
        location: {
            desc: PRIMARY_PROPS,
            variant: { $ref: "#/$defs/ColorVariant" },
            kind: { enum: KIND_MAP.location },
            image: { $ref: "#/$defs/Images" },
            description: DESCRIPTION_SCHEME,
            properties: {
                coordinates: { $ref: "#/$defs/Coordinates" },
                street: { type: "string" },
                house: { type: "string" },
                flat: { type: "string" },
                floor: { type: "number" },
                room: { type: "number" },
                square: { type: "number" },
                price: { type: "number" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },
                rewards: BONUSES_SCHEME
            },
            required: ["kind", "properties"]
        },

        //
        skill: {
            desc: PRIMARY_PROPS,
            variant: { $ref: "#/$defs/ColorVariant" },
            kind: { enum: KIND_MAP.skill },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            properties: {
                level: LEVEL_SCHEME,
                tasks: { $ref: "#/$defs/IdArray" },
                actions: ACTIONS_SCHEME,
                bonuses: BONUSES_SCHEME,
                results: { type: "array", items: { type: "string" } },
                profession_related: { $ref: "#/$defs/IdArray" }, // professions related to this skill
            },
            required: ["kind", "level", "properties"]
        },

        //
        vendor: {
            desc: PRIMARY_PROPS,
            variant: { $ref: "#/$defs/ColorVariant" },
            kind: { enum: KIND_MAP.vendor },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            properties: {
                coordinates: { $ref: "#/$defs/Coordinates" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },
                feedbacks: FEEDBACKS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME
            },
            required: ["kind", "properties"]
        },

        //
        market: {
            desc: PRIMARY_PROPS,
            variant: { $ref: "#/$defs/ColorVariant" },
            kind: { enum: KIND_MAP.market },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            properties: {
                location: { $ref: "#/$defs/LocationRef" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },

                //
                feedbacks: FEEDBACKS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                prices: BONUSES_SCHEME,

                //
                purpose: { enum: ["entertainment", "food", "services", "medical", "electronics", "furniture", "specialized", "professional", "other"] },
                permissions: PERMISSIONS_SCHEME,
                availability: AVAILABILITY_SCHEME,
                availabilityTime: AVAILABILITY_TIME_SCHEME,
                availabilityDays: AVAILABILITY_DAYS_SCHEME,
            },
            required: ["kind", "purpose", "properties"]
        },

        //
        place: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.place },
            variant: { $ref: "#/$defs/ColorVariant" },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            properties: {
                location: { $ref: "#/$defs/LocationRef" },
                members: { $ref: "#/$defs/IdArray" },
                services: { $ref: "#/$defs/IdArray" },

                //
                feedbacks: FEEDBACKS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                prices: BONUSES_SCHEME,

                //
                purpose: { enum: ["entertainment", "food", "services", "medical", "electronics", "furniture", "specialized", "professional", "other"] },
                permissions: PERMISSIONS_SCHEME,
                availability: AVAILABILITY_SCHEME,
                availabilityTime: AVAILABILITY_TIME_SCHEME,
                availabilityDays: AVAILABILITY_DAYS_SCHEME,
            },
            required: ["kind", "location", "properties"]
        },

        //
        service: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.service },
            variant: { $ref: "#/$defs/ColorVariant" },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            properties: {
                whereIs: WHERE_IS_SCHEME,

                //
                location: { $ref: "#/$defs/LocationRef" },

                //
                persons: PERSON_SCHEME,
                contacts: { $ref: "#/$defs/Contact" },
                tasks: { $ref: "#/$defs/IdArray" },
                actions: ACTIONS_SCHEME,

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                prices: BONUSES_SCHEME,
                feedbacks: FEEDBACKS_SCHEME,

                //
                quantity: { type: "number" }
            },
            required: ["kind", "contacts", "properties"]
        },

        //
        person: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.person },
            description: DESCRIPTION_SCHEME,
            variant: { $ref: "#/$defs/ColorVariant" },
            image: { $ref: "#/$defs/Images" },
            properties: {
                home: { $ref: "#/$defs/LocationRef" },
                jobs: { type: "array", items: { $ref: "#/$defs/LocationRef" } },
                tasks: { $ref: "#/$defs/IdArray" },

                //
                contacts: { $ref: "#/$defs/Contact" },
                services: { $ref: "#/$defs/IdArray" },
                location: { $ref: "#/$defs/LocationRef" },
                biography: {
                    firstName: { type: "string" },
                    lastName: { type: "string", optional: true },
                    middleName: { type: "string", optional: true },
                    nickName: { type: "string", optional: true },
                    birthdate: { type: "string", format: "date", optional: true },
                    gender: { enum: ["male", "female", "other"], optional: true }
                },

                //
                prices: BONUSES_SCHEME,
                actions: ACTIONS_SCHEME,
                feedbacks: FEEDBACKS_SCHEME
            },
            required: ["kind", "contacts", "biography", "properties"]
        },

        // it's your car, transport, bike, or rented transport, or ride on bus, train, etc.
        vehicle: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.vehicle },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                role: { enum: ["driver", "passenger", "other"] },
                rights: { enum: ["own", "rented", "borrowed", "service", "free", "other"] },
                destination: { $ref: "#/$defs/LocationRef" },
                route: { $ref: "#/$defs/IdArray" }, // routes to destination, in future it may be separate entity, but now it's just array of locations

                // for bus, train, etc.
                timeLimit: { $ref: "#/$defs/Timestamp" },

                //
                location: { $ref: "#/$defs/LocationRef" },
                services: { $ref: "#/$defs/IdArray" },
                contacts: { $ref: "#/$defs/Contact" },

                //
                members: { $ref: "#/$defs/IdArray" },

                //
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                feedbacks: FEEDBACKS_SCHEME,
                prices: BONUSES_SCHEME,
                quantity: { type: "number" }
            },
            required: ["kind", "properties"]
        },

        //
        event: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.event },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                location: { $ref: "#/$defs/LocationRef" },

                //
                tasks: { $ref: "#/$defs/IdArray" },

                //
                begin_time: { $ref: "#/$defs/Timestamp" },
                end_time: { $ref: "#/$defs/Timestamp" },

                //
                members: { $ref: "#/$defs/IdArray" },

                //
                actions: ACTIONS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                prices: BONUSES_SCHEME
            },
            required: ["begin_time", "location", "properties"]
        },

        //
        item: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.item },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                //
                markets: { $ref: "#/$defs/IdArray" },

                //
                location: { $ref: "#/$defs/LocationRef" },
                contacts: { $ref: "#/$defs/Contact" },

                //
                suitableFor: ACTIONS_SCHEME,
                feedbacks: FEEDBACKS_SCHEME,

                //
                prices: BONUSES_SCHEME, // if currency, used for exchange (RUB/EUR/USD)
                quantity: { type: "number" } // if currency, how many money you has, negative value is used for debt
            },
            required: ["kind", "properties"]
        },

        //
        action: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.action },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                difficulty: DIFFICULTY_SCHEME,
                duration: DURATION_SCHEME,

                // <isn't very good suitable for actions, preferred for tasks>
                location: { $ref: "#/$defs/LocationRef" },

                // for what tasks doing this action
                tasks: { $ref: "#/$defs/IdArray" },

                // what used items, skills, services, etc. so needs to mention entity type
                // arrays of pairs of entity type and entity id, e.g. [{ type: "item", id: "book" }, { type: "skill", id: "coding" }]
                whatUsed: { $ref: "#/$defs/IdArray" },

                //
                prices: BONUSES_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME
            },
            required: ["kind", "properties"]
        },

        //
        entertainment: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.entertainment },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                actions: ACTIONS_SCHEME,
                persons: PERSON_SCHEME,

                //
                contacts: { $ref: "#/$defs/Contact" },

                //
                location: { $ref: "#/$defs/LocationRef" },

                //
                begin_time: { $ref: "#/$defs/Timestamp" },
                end_time: { $ref: "#/$defs/Timestamp" },

                //
                tasks: { $ref: "#/$defs/IdArray" },

                //
                prices: BONUSES_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                feedbacks: FEEDBACKS_SCHEME
            },
            required: ["location", "kind", "properties"]
        },

        //
        bonus: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.bonus },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },

            // used for request, along with kind details
            usabilityKind: {
                forEntity: [
                    "item",
                    "service",
                    "entertainment",
                    "action"
                ],
                inEntity: [
                    "location",
                    "market",
                    "place",
                    "event",
                    "action",
                    "person"
                ]
            },

            //
            properties: {
                // items, services, entertainment, actions, events
                usableFor: { $ref: "#/$defs/IdArray" },

                // location, market, placement, service, entertainment, action, person, event
                usableIn: { $ref: "#/$defs/IdArray" },

                //
                availability: AVAILABILITY_SCHEME,
                availabilityTime: AVAILABILITY_TIME_SCHEME,
                availabilityDays: AVAILABILITY_DAYS_SCHEME,

                //
                requirements: { $ref: "#/$defs/IdArray" },

                // additional properties
                additionalProperties: { type: "object" },

                //
                persons: PERSON_SCHEME,
                actions: ACTIONS_SCHEME,
                bonuses: BONUSES_SCHEME,
                rewards: BONUSES_SCHEME,
                prices: BONUSES_SCHEME,

                //
                contacts: { $ref: "#/$defs/Contact" }
            },
            required: ["kind", "properties"]
        },

        //
        lottery: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.lottery },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                requirements: { $ref: "#/$defs/IdArray" },
                chance: { type: "number", minimum: 0, maximum: 100 },
                location: { $ref: "#/$defs/LocationRef" },
                usageLimit: { type: "number" },
                timeLimit: { $ref: "#/$defs/Timestamp" },
                rewards: BONUSES_SCHEME,
                bonuses: BONUSES_SCHEME,
                prices: BONUSES_SCHEME
            },
            required: ["kind", "chance", "rewards", "requirements", "properties"]
        },

        // also, may means debt, receipt, etc.
        fine: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.fine },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                // what needs to give in case of fine (time is may be arrest or sentence, or job), but not for reward
                reasonsToGive: { $ref: "#/$defs/IdArray" },
                location: { $ref: "#/$defs/LocationRef" },
                entity: { $ref: "#/$defs/Id" },
                usageLimit: { type: "number" },
                timeLimit: { $ref: "#/$defs/Timestamp" },
                prices: BONUSES_SCHEME,
                entityLocation: { $ref: "#/$defs/LocationRef" }
            },
            required: ["kind", "entity", "reasonsToGive", "properties"]
        },

        //
        reward: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.reward },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                prices: BONUSES_SCHEME,
                requirements: { $ref: "#/$defs/IdArray" },
                location: { $ref: "#/$defs/LocationRef" },
                usageLimit: { type: "number" },
                timeLimit: { $ref: "#/$defs/Timestamp" },
                entityLocation: { $ref: "#/$defs/LocationRef" }
            },
            required: ["kind", "properties"]
        },

        // if entity is not specified, it's unknown
        unknown: {
            desc: PRIMARY_PROPS,
            kind: { enum: KIND_MAP.unknown },
            description: DESCRIPTION_SCHEME,
            image: { $ref: "#/$defs/Images" },
            variant: { $ref: "#/$defs/ColorVariant" },
            properties: {
                location: { $ref: "#/$defs/LocationRef" },
                suggestedKind: { type: "string" }
            },
            required: ["description", "properties"]
        }
    },
};

//
export const AI_OUTPUT_SCHEMA = {
    description: "AI responses must follow the guide in AI_OUTPUT_GUIDE: always reply with { task, entity }.",
    task: JSON_SCHEMES.$task,
    entityOneOf: [
        JSON_SCHEMES.$entities.location,
        JSON_SCHEMES.$entities.vendor,
        JSON_SCHEMES.$entities.market,
        JSON_SCHEMES.$entities.place,
        JSON_SCHEMES.$entities.service,
        JSON_SCHEMES.$entities.person,
        JSON_SCHEMES.$entities.vehicle,
        JSON_SCHEMES.$entities.event,
        JSON_SCHEMES.$entities.item,
        JSON_SCHEMES.$entities.action,
        JSON_SCHEMES.$entities.entertainment,
        JSON_SCHEMES.$entities.bonus,
        JSON_SCHEMES.$entities.reward,
        JSON_SCHEMES.$entities.lottery,
        JSON_SCHEMES.$entities.fine,
        JSON_SCHEMES.$entities.unknown,
        JSON_SCHEMES.$entities.factor
    ]
};
